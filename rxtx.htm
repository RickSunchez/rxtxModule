 <script type="text/javascript" src="rxtx_configs.js"></script>
 <script type="text/javascript">
 	var CTX, 
 		H, W, 
 		rxtx = [], service = [],
 		SX, SY, 
 		onMove = false, onField = false,
 		newRXTX, mainModule, findModule, field,
 		setArea, 
 		setSpeed, 
 		action = "ADD_POINT",
 		modules_list;

 	window.onload = () => {
 		let canvas = document.getElementById("canvas");
 		W = document.body.offsetWidth - 300;
 		H = document.body.offsetHeight;

 		canvas.width = W;
 		canvas.height = H;
 		CTX = canvas.getContext("2d");

 		setArea = 300,
		setSpeed = 8;

		mainModule = new rxtxModule(1, 100, H - 100, setArea, setSpeed, "", "main");
		findModule = new rxtxModule(9999, W - 100, 100, setArea, setSpeed, "Find me!", "passive");

		modules_list = document.getElementById('modules_list');
		let map_list = document.getElementById('map_list');
		rxtxConfigs.map(function(config, i){
			let opt = document.createElement("option");

			opt.value = i;
			opt.innerText = config["rus_name"];

			map_list.appendChild(opt);
		})

 		setInterval(update, 20);
 	}
 	window.onmousedown = () => {
 		SX = event.clientX;
 		SY = event.clientY;
 		
 		if (SX < W && SY < H) {
 			onMove = true;

			switch (action) {
	 			case "ADD_POINT": 
	 				newRXTX = new rxtxModule(0, SX, SY, setArea, setSpeed, "I'm module!", "normal");
	 				newRXTX.draw();
	 				break;
	 			case "ADD_PASSIVE":
	 				findModule.x = SX;
	 				findModule.y = SY;
	 				break;
	 			case "ADD_MAIN":
	 				mainModule.x = SX;
	 				mainModule.y = SY;
	 				break;
	 			case "ADD_SERVICE":
	 				newRXTX = new rxtxModule(0, SX, SY, setArea, setSpeed, "", "service");
	 				newRXTX.draw();
	 				break;
	 		}
 		}
 	}
 	window.onmousemove = () => {
 		if (!onMove) return false;

 		switch (action) {
 			case "ADD_SERVICE":
 			case "ADD_POINT": 
 				newRXTX.x = event.clientX;
 				newRXTX.y = event.clientY;
 				break;
 			case "ADD_PASSIVE":
 				findModule.x = event.clientX;
 				findModule.y = event.clientY;
 				break;
 			case "ADD_MAIN":
 				mainModule.x = event.clientX;
 				mainModule.y = event.clientY;
 				break;
 		}
 		
 	}
 	window.onmouseup = () => {
 		if (SX > W || SY > H) return false;

 		onMove = false;
 		if (action == "ADD_POINT") {
 			appendNewInList(newRXTX.ID);
 			rxtx.push(newRXTX);
 		}
 		if (action == "ADD_SERVICE") {
 			service.push(newRXTX);
 		}

 		delete newRXTX;
 	}
 	window.onkeydown = () => {
 		if (event.keyCode == 17) action = "ADD_PASSIVE"; //CTRL
 		if (event.keyCode == 16) action = "ADD_SERVICE"; //SHIFT
 		if (event.keyCode == 88) action = "ADD_MAIN"; //X
 	}
 	window.onkeyup = () => {
 		action = "ADD_POINT"
 	}


 	function update() {
 		clearCanvas();

 		field = rxtx.concat(service, findModule, mainModule);

 		field.map(function(module) {
 			module.draw();
 			if (module.TXon) module.tx();
 			if (module.RXon) module.rx();
 		})

 		if (newRXTX) newRXTX.draw();
 	}

 	function rxtxModule(ID, x,y, area, speed, text, type){
 		this.ID = ID ? ID : parseInt(Math.random()*999999 + 99999);
 		this.x = x ? x : 0;
 		this.y = y ? y : 0;
 		this.maxArea = area ? area : 500;
 		this.speed = speed ? speed : 1;
 		this.text = text ? text : "default";
 		this.t = type;
 		this.RXon = true;
 		this.TXon = false;
 		this.currentQuery = "";
 		this.currentQueryCounter = 0;

 		this.getTX = () => {return currentTX;}


 		let r = 5,
 			currentTX = r;

 		this.draw = () => {
 			CTX.beginPath();
 				if (this.t == "normal") CTX.fillStyle = "#FF5C6F";
 				if (this.t == "passive") CTX.fillStyle = "#FE60ED";
 				if (this.t == "service") CTX.fillStyle = "#000000";
 				if (this.t == "main") CTX.fillStyle = "#00CF00";
 				
 				CTX.arc(this.x, this.y, r, 0, 2*Math.PI, true);
 				CTX.fill();

				CTX.font = "10px Courier";
				CTX.fillText(this.ID, this.x + r, this.y - r);

				if (!this.TXon) currentTX = r;
 			CTX.closePath();
 		}

 		this.tx = (text) => {
 			CTX.beginPath();
 				CTX.strokeStyle = "#00FF05";
 				CTX.arc(this.x, this.y, currentTX, 0, 2*Math.PI, true);
 				CTX.stroke();
 			CTX.closePath();
 			currentTX = (currentTX >= this.maxArea) ? r : (currentTX + this.speed);

 			this.text = text ? text : this.text;
 		}

 		this.rx = () => {
 			let x = this.x,
 				y = this.y,
 				ID = this.ID,
 				mod = this;

 			field.map(function(module) {
	 			if (module.ID == ID) return false;

	 			let dx = Math.pow((x - module.x), 2),
	 				dy = Math.pow((y - module.y), 2),
	 				dr = Math.pow((r - module.getTX()), 2)

	 			if ((dx + dy) < dr) {
	 				RXcommand(module.text, mod);
	 			}
	 		})
 		}
 	}

 	function RXcommand(command, module) {
 		if (command.substring(0,4) != "8888") return false;

 		let comm = command.substring(4).split(":");
 		
 		if (module.currentQuery == comm[0] || module.currentQueryCounter) {
 			module.currentQueryCounter = module.currentQueryCounter ? module.currentQueryCounter : new Date().getTime();

 			let now = new Date().getTime();

 			if ((now - module.currentQueryCounter) >= 1000) {
 				module.TXon = false;
 				return false;
 			}
 		}

 		if (comm[1] != module.ID) {
 			module.currentQuery = comm[0];
 			module.text = command;
 			module.TXon = true;
 			return false;
 		}

 		if (comm[1] == module.ID) {
 			if (module.currentQuery != "finded"){
 				offAll();
 				alert("Find!");
 			}
 			module.currentQuery = "finded";
 		}
 	}

//-----------------------------------------------------------------------------------
//--------------------------------- LEGEND ELEMENTS ---------------------------------
//-----------------------------------------------------------------------------------
 	function mainStart() {
 		offAll();

 		let findID = parseInt(modules_list.value);

 		mainModule.TXon = mainModule.TXon ? false : true;
 		mainModule.text = "8888123:"+findID+":find";
 	}

 	function changeFindModule(newId) {
 		rxtx.map(function(m,i){
 			if (m.ID != newId) return false;
 			let tmp = findModule;

 			findModule = m;
			findModule.t = tmp.t;

			rxtx[i] = tmp;
			rxtx[i].t = 'normal';
 		})
 	}
 	function drawService(obj) {
 		let mapPts = [],
 			startID = 6000;

 		let dH_count = Math.ceil((H-100) / 250),
 			dW_count = Math.ceil((W-100) / 250),
 			dH = parseInt((H-100) / dH_count),
 			dW = parseInt((W-100) / dW_count);

 		for (let i=0; i<=dW*dW_count; i+=dW) {
 			for (let j=0; j<=dH*dH_count; j+=dH) {
 				if (i==0 || i==dW*dW_count) {
 					mapPts.push([i+50,j+50]);
 				}
 				else if (j==0 || j==dH*dH_count) {
 					mapPts.push([i+50,j+50]);
 				}
 				
 			}
 		}

 		mapPts.map(function(pt){
 			service.push(new rxtxModule(startID++, pt[0],pt[1], setArea, setSpeed, "", "service"))
 		})
 		
 		obj.disabled = true;
 	}

 	function selectMap(mapID) {
 		let mapPts = JSON.parse(rxtxConfigs[mapID]['map']),
 			startID = 5000;

 		rxtx = [];

 		mapPts.map(function(pt){
 			let currentId = startID++;
 			rxtx.push(new rxtxModule(currentId, pt[0]*(W/1184),pt[1]*(H/987), setArea, setSpeed, "", "normal"));

 			appendNewInList(currentId);
 		})
 	}
//-----------------------------------------------------------------------------------
//--------------------------------- LEGEND ELEMENTS ---------------------------------
//-----------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------
//--------------------------------- MICRO FUNCTIONS ---------------------------------
//-----------------------------------------------------------------------------------
 	function offAll() {
 		field.map(function(m) {
 			m.TXon = false;
 			m.text = "";
 			m.currentTX = 0;
 			m.currentQuery = "";
 			m.currentQueryCounter = 0;
 		})
 	}

 	function appendNewInList(ID){
		let opt = document.createElement("option");
		opt.value = ID;
		opt.innerText = ID;

		modules_list.appendChild(opt);
 	}

 	function clearCanvas() {
 		CTX.clearRect(0,0, W, H);
 	}
//-----------------------------------------------------------------------------------
//--------------------------------- MICRO FUNCTIONS ---------------------------------
//-----------------------------------------------------------------------------------

//////////////////////////////////////////////asdasdasdasdasdasdasdasdsadasd
//////////////////////////////////////////////asdasdasdasdasdasdasdasdsadasd
//////////////////////////////////////////////asdasdasdasdasdasdasdasdsadasd
/*
function test() {
	let mapPts = [],
		sx = 100, 
		sy = H - 100,
		n = 0,m = 0;

	for (let i=50; i<(W-100); i+= 91) {
		n++;m=0;
		for (let j=50; j<(H-120); j+=72){
			m++;
			if (n == m)
				mapPts.push([sx+i, sy-j]);
		}
	}

	rxtx = [];

	console.log(JSON.stringify(mapPts));
	mapPts.map(function(pt){
		rxtx.push(new rxtxModule(0, pt[0]*(W/1184),pt[1]*(H/987), setArea, setSpeed, "", "normal"));
	})
}
*/
//////////////////////////////////////////////asdasdasdasdasdasdasdasdsadasd
//////////////////////////////////////////////asdasdasdasdasdasdasdasdsadasd
//////////////////////////////////////////////asdasdasdasdasdasdasdasdsadasd
 </script>
 <style type="text/css">
 	* {
 		margin: 0px;
 		padding: 0px;
 	}
 	#canvas {
 		position: absolute;
 		top: 0px;
 		left: 0px;
 	}
 	#legend {
 		width: 300px;
 		height: 100vh;
 		background-color: #C3C3C3;
 		position: absolute;
 		top: 0px;
 		right: 0px;
 	}
 	button {
 		width: 100%;
 		height: 75px;
 		border: none;
 		background-color: #5CFF5F;
 	}
 	button:hover {
 		background-color: #FFFFFF;
 	}
 	select {
 		position: relative;
 		width: 100%;
 		height: 75px;
 	}
 </style>
 <body>
 	<canvas id="canvas"></canvas>
 	<div id="legend">
 		<button onclick="mainStart()">mainStart()</button>
 		<button onclick="drawService(this)">drawService()</button>
 		<select id="map_list" onchange="selectMap(this.value)">
 			<option selected disabled>Выберите карту модулей</option>
 		</select>	
 		<select id="modules_list" onchange="changeFindModule(this.value)">
 			<option>9999</option>
 		</select>	

 		<!--<button onclick="test()">test()</button>-->
 	</div>

 </body>