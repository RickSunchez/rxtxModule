 <script type="text/javascript">
 	var CTX, 
 		H, W, 
 		rxtx = [], 
 		SX, SY, 
 		onMove = false, 
 		newRXTX, mainModule, findModule,
 		setArea, 
 		setSpeed, 
 		action = "ADD_POINT";

 	window.onload = () => {
 		let canvas = document.createElement("canvas");
 		W = document.body.offsetWidth;
 		H = document.body.offsetHeight;

 		canvas.width = W;
 		canvas.height = H;
 		document.body.appendChild(canvas);
 		CTX = canvas.getContext("2d");

 		setArea = 200,
		setSpeed = 5;

 		setInterval(update, 20);
 	}
 	window.onmousedown = () => {
 		onMove = true;
 		SX = event.clientX;
 		SY = event.clientY;

		switch (action) {
 			case "ADD_POINT": 
 				newRXTX = new rxtxModule(0, SX, SY, setArea, setSpeed, "", "normal");
 				newRXTX.draw();
 				break;
 			case "ADD_PASSIVE":
 				findModule = new rxtxModule(0, SX, SY, setArea, setSpeed, "", "passive");
 				break;
 		}
 	}
 	window.onmousemove = () => {
 		if (!onMove) return false;

 		switch (action) {
 			case "ADD_POINT": 
 				newRXTX.x = event.clientX;
 				newRXTX.y = event.clientY;
 				break;
 			case "ADD_PASSIVE":
 				findModule.x = event.clientX;
 				findModule.y = event.clientY;
 				break;
 		}
 		
 	}
 	window.onmouseup = () => {
 		onMove = false;
 		if (action == "ADD_POINT") {
 			rxtx.push(newRXTX);
 			delete newRXTX;
 		}
 	}
 	window.onkeydown = () => {
 		if (event.keyCode == 17) action = "ADD_PASSIVE";
 	}
 	window.onkeyup = () => {
 		action = "ADD_POINT"
 	}


 	function update() {
 		clearCanvas();

 		rxtx.map(function(module) {
 			module.draw();
 			module.tx("My name is: " + module.ID);
 			module.rx();
 		})

 		if (newRXTX) newRXTX.draw();
 		if (findModule) {
 			findModule.draw();
 			findModule.rx();
 			findModule.tx("Find me!");
 		}
 	}

 	function clearCanvas() {
 		CTX.clearRect(0,0, W, H);
 	}

 	function rxtxModule(ID, x,y, area, speed, text, type){
 		this.ID = ID ? ID : parseInt(Math.random()*99999);
 		this.x = x ? x : 0;
 		this.y = y ? y : 0;
 		this.maxArea = area ? area : 500;
 		this.speed = speed ? speed : 1;
 		this.text = text ? text : "default";
 		this.t = type;

 		this.getTX = () => {return currentTX;}


 		let r = 5,
 			currentTX = r;

 		this.draw = () => {
 			CTX.beginPath();
 				if (this.t == "normal") CTX.fillStyle = "#FF5C6F";
 				if (this.t == "passive") CTX.fillStyle = "#FE60ED";
 				if (this.t == "main") CTX.fillStyle = "#00CF00";
 				
 				CTX.arc(this.x, this.y, r, 0, 2*Math.PI, true);
 				CTX.fill();

				CTX.font = "20px Courier";
				CTX.fillText(this.ID, this.x + r, this.y - r);
 			CTX.closePath();
 		}

 		this.tx = (text) => {
 			CTX.beginPath();
 				CTX.strokeStyle = "#00FF05";
 				CTX.arc(this.x, this.y, currentTX, 0, 2*Math.PI, true);
 				CTX.stroke();
 			CTX.closePath();
 			currentTX = (currentTX >= this.maxArea) ? r : (currentTX + this.speed);
 			this.text = text;
 		}

 		this.rx = () => {
 			let x = this.x,
 				y = this.y,
 				ID = this.ID;

 			rxtx.map(function(module) {
	 			if (module.ID == ID) return false;

	 			let dx = Math.pow((x - module.x), 2),
	 				dy = Math.pow((y - module.y), 2),
	 				dr = Math.pow((r - module.getTX()), 2)

	 			//console.log(module.x);
	 			if ((dx + dy) < dr) {
	 				console.log(module.text + ", my coords: " + module.x + ":" + module.y);
	 			}
	 		})
 		}

 	}
 </script>
 <style type="text/css">
 	* {
 		margin: 0px;
 		padding: 0px;
 	}
 </style>